import { html } from "lit-html";
import "@holochain-open-dev/{{kebab_case app_name}}/elements/{{kebab_case collection_name}}.js";
import "@holochain-open-dev/{{kebab_case app_name}}/elements/{{kebab_case app_name}}-context.js";
import { {{pascal_case app_name}}ZomeMock, sample{{pascal_case referenceable.name}} } from "@holochain-open-dev/{{kebab_case app_name}}/dist/mocks.js";
import { {{pascal_case app_name}}Store, {{pascal_case app_name}}Client } from "@holochain-open-dev/{{kebab_case app_name}}";

const mock = new {{pascal_case app_name}}ZomeMock();
const client = new {{pascal_case app_name}}Client(mock);

const {{camel_case referenceable.name}} = await sample{{pascal_case referenceable.name}}(client);

const record = await mock.create_{{snake_case referenceable.name}}({{camel_case referenceable.name}});

const store = new {{pascal_case app_name}}Store(client);

// More on how to set up stories at: https://storybook.js.org/docs/7.0/web-components/writing-stories/introduction
export default {
  title: "Frontend/Elements/{{kebab_case collection_name}}",
  tags: ["autodocs"],
  component: "{{kebab_case collection_name}}",
  render: (args) =>
    html` <{{kebab_case app_name}}-context
      .store=${store}
    >
      <{{kebab_case collection_name}} {{#if (eq collection_type.type "ByAuthor")}}.author=${record.signed_action.hashed.content.author}{{/if}}></{{kebab_case collection_name}}>
    </{{kebab_case app_name}}-context>`,
};

// More on writing stories with args: https://storybook.js.org/docs/7.0/web-components/writing-stories/args
export const Demo = {};
