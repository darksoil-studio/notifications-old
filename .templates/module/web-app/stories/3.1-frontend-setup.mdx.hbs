import { Meta } from '@storybook/addon-docs';

<Meta title="Frontend/Setting up the frontend" />

# Seting Up the Frontend

> This guide assumes you are building a web application written in JS or TS, using NPM as the package manager.

> [Go here](https://holochain-open-dev.github.io/reusable-modules/frontend/frameworks/) to look at examples of integration of this module in different frontend frameworks (Vue, Svelte, etc.).

1. Install this module and its necessary dependencies with:

```bash
npm install @holochain-open-dev/{{kebab_case app_name}}
```

Careful! If you are using NPM workspaces (which is the case for the apps generated with the holochain scaffolding tool (`hc scaffold`), you need to specify which workspace you want to install those dependencies to, and run the command from the root folder of the repository. In the case of the apps generated with the scaffolding tool:

```bash
npm install @holochain-open-dev/{{kebab_case app_name}} -w ui
```

2. Connect to Holochain with the `AppAgentClient`, and create the `{{pascal_case app_name}}Store` with it:

```js
import { {{pascal_case app_name}}Store, {{pascal_case app_name}}Client } from "@holochain-open-dev/profiles";
import { AppAgentWebsocket } from "@holochain/client";

async function setup{{pascal_case app_name}}Store() {
  const client = await AppAgentWebsocket.connect(new URL('ws://localhost'), '')

  // TODO: change "MY_CELL_ROLE" for the roleId that you can find in your "happ.yaml"
  return new {{pascal_case app_name}}Store(new {{pascal_case app_name}}Client(client, '<MY_CELL_ROLE>'));
}
```

3. Import the `<{{kebab_case app_name}}-context>` element and add it to your html **wrapping the whole section of your page in which you are going to be placing** the other elements from `@holochain-open-dev/{{kebab_case app_name}}`:

```js
// This can be placed in the index.js, at the top level of your web-app.
import "@holochain-open-dev/{{kebab_case app_name}}/definitions/{{kebab_case app_name}}-context.js";
```

And then add the `<{{kebab_case app_name}}-context>` element in your html:

```html
<{{kebab_case app_name}}-context>
  <!-- Add here other elements from @holochain-open-dev/{{kebab_case app_name}} -->
</{{kebab_case app_name}}-context>
```

4. Attach the `{{camel_case app_name}}Store` to the `<{{kebab_case app_name}}-context>` element:

- Go to [this page](https://holochain-open-dev.github.io/reusable-modules/frontend/frameworks/), select the framework you are using, and follow its example.

You need to set the `store` property of it to your already instantiated `{{pascal_case app_name}}Store` object:

- If you **are using some JS framework**:

```html
<!-- React -->
<{{kebab_case app_name}}-context store={ {{camel_case app_name}}Store}><!-- ... --></{{kebab_case app_name}}-context>

<!-- Angular -->
<{{kebab_case app_name}}-context [store]="{{camel_case app_name}}Store"><!-- ... --></{{kebab_case app_name}}-context>

<!-- Vue -->
<{{kebab_case app_name}}-context :store="{{camel_case app_name}}Store"><!-- ... --></{{kebab_case app_name}}-context>

<!-- Svelte -->
<{{kebab_case app_name}}-context store={ {{camel_case app_name}}Store}><!-- ... --></{{kebab_case app_name}}-context>

<!-- Lit -->
<{{kebab_case app_name}}-context .store=${ {{camel_case app_name}}Store}><!-- ... --></{{kebab_case app_name}}-context>
```

OR

- If you **are not using any framework**:

```js
const contextElement = document.querySelector("{{kebab_case app_name}}-context");
contextElement.store = store;
```

> You can read more about the context pattern [here](https://holochain-open-dev.github.io/reusable-modules/frontend/using/#context).

5. [Choose which elements you need](?path=/docs/frontend-elements) and import them like this:

```js
import "@holochain-open-dev/{{kebab_case app_name}}/elements/{{kebab_case app_name}}-context.js";
```

And then they are ready be used inside the `<{{kebab_case app_name}}-context>` just like any other HTML tag.

This will define all the elements from this module in the global `CustomElementsRegistry`. You can read more about Custom Elements [here](https://developers.google.com/web/fundamentals/web-components/customelements).

6. Add your preferred shoelace theme in your `<head>` tag:

```html
  <head>
    <link rel="stylesheet" href="path/to/shoelace/dist/themes/light.css" />
  </head>
```

You can read more about how to initialize the shoelace theme [here](https://shoelace.style/getting-started/themes?id=activating-themes).

# Demo

You can see a full working example of the UI working in [here](https://github.com/holochain-open-dev/{{kebab_case app_name}}/blob/main/ui/demo/index.html).

